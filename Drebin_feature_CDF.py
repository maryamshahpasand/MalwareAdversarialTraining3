
# import load_data
import numpy as np
import pandas as pd
import scipy.sparse
import matplotlib.pyplot as plt



# xtrain_mal = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtrain_mal.npz').toarray().astype(np.int8)
# xtest_mal = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtest_mal.npz')
# x_mal = np.concatenate([xtrain_mal, xtest_mal]).astype(np.int8)

# [(xtrain_mal, ytrain_mal), (xtrain_ben, ytrain_ben),(xtest_mal, xtest_ben), (ytest_mal, ytest_ben)], features= load_data.load_data(loaded= True)

xtest_ben = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtest_ben.npz').astype(np.int8)
xtrain_ben = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtrain_ben.npz').astype(np.int8)

x_ben= scipy.sparse.vstack([xtest_ben,xtrain_ben])

xtrain_mal = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtrain_mal.npz')
xtest_mal = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtest_mal.npz')


x_mal= scipy.sparse.vstack([xtest_mal,xtrain_mal])
del xtrain_mal , xtest_mal



xtrain_mal = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtrain_mal.npz').toarray()
xtrain_ben = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtrain_ben.npz').toarray()
xtest_mal = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtest_mal.npz').toarray()
xtest_ben = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtest_ben.npz').toarray()
# ytrain = np.load('./MalwareDataset/y_train.npy')
# xtrain_mal = xtrain[np.where(ytrain == 1)]
# xtrain_ben = xtrain[np.where(ytrain == 0)]
# ytrain_mal = ytrain[np.where(ytrain == 1)]
# ytrain_ben = ytrain[np.where(ytrain == 0)]
#
# xtest = scipy.sparse.load_npz('./MalwareDataset/x_test.npz').toarray()
# ytest = np.load('./MalwareDataset/y_test.npy')
# features = np.load('./MalwareDataset/Drebin_important_features.npy')
# features = np.append(features, [features[len(features) - 1]], axis=0)
#
# xtest_mal = xtest[np.where(ytest == 1)]
# xtest_ben = xtest[np.where(ytest == 0)]
# ytest_mal = ytest[np.where(ytest == 1)]
# ytest_ben = ytest[np.where(ytest == 0)]



x_mal = np.concatenate([xtrain_mal ,xtest_mal])
x_ben = np.concatenate([xtrain_ben ,xtest_ben])
for i in range(10):
    idx = np.random.randint(0, x_ben.shape[0], x_mal.shape[0] * 2)
    print(idx)
    x_ben = x_ben[idx]
    print(x_ben)

    x_mal_number_of_features = np.sum(x_mal, axis=0)
    x_ben_number_of_features = np.sum(x_ben, axis=0)
    key = ['features', 'number_of_occurance']
    value = [range(x_mal_number_of_features.shape[0]), x_mal_number_of_features]
    mal_dictionary = dict(zip(key, value))
    value = [range(x_ben_number_of_features.shape[0]), x_ben_number_of_features]

    ben_dictionary = dict(zip(key, value))

    mal_df = pd.DataFrame(mal_dictionary, columns=['features', 'number_of_occurance'])
    ben_df = pd.DataFrame(ben_dictionary, columns=['features', 'number_of_occurance'])

    mal_cum_sum = mal_df['number_of_occurance'].cumsum()
    ben_cum_sum = ben_df['number_of_occurance'].cumsum()

    plt.figure()
    plt.plot(range(len(mal_cum_sum)), mal_cum_sum, c='r', label='Malware samples', linewidth=2)
    # plt.plot(range(len(Train_FNR)), Train_FNR, c='r', label='Attack success rate', linewidth=2)
    plt.plot(range(len(ben_cum_sum)), ben_cum_sum, c='g', linestyle='--', label='Benign Samples', linewidth=2)
    plt.xlabel('Feature index')
    plt.ylabel('CDF')
    plt.legend()
    # plt.savefig('/home/maryam/Code/python/adversarial_training/torch_impl/_'+str(por)+'/Epoch_FNR({0}).png'.format(round))
    plt.show()




